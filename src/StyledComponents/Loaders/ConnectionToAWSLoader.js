import React, { useState, useEffect } from 'react'
import { useSelector } from "react-redux";
import styled from "styled-components";

const ConnectionToAWSLoaderStyled = styled.div`


/* ----------------------------------------------
 * Generated by Animista on 2021-9-8 23:25:41
 * Licensed under FreeBSD License.
 * See http://animista.net/license for more info. 
 * w: http://animista.net, t: @cssanimista
 * ---------------------------------------------- */

/**
 * ----------------------------------------
 * animation bounce-in-top
 * ----------------------------------------
 */
 @-webkit-keyframes bounce-in-top {
  0% {
    -webkit-transform: translateY(-500px);
            transform: translateY(-500px);
    -webkit-animation-timing-function: ease-in;
            animation-timing-function: ease-in;
    opacity: 0;
  }
  38% {
    -webkit-transform: translateY(0);
            transform: translateY(0);
    -webkit-animation-timing-function: ease-out;
            animation-timing-function: ease-out;
    opacity: 1;
  }
  55% {
    -webkit-transform: translateY(-65px);
            transform: translateY(-65px);
    -webkit-animation-timing-function: ease-in;
            animation-timing-function: ease-in;
  }
  72% {
    -webkit-transform: translateY(0);
            transform: translateY(0);
    -webkit-animation-timing-function: ease-out;
            animation-timing-function: ease-out;
  }
  81% {
    -webkit-transform: translateY(-28px);
            transform: translateY(-28px);
    -webkit-animation-timing-function: ease-in;
            animation-timing-function: ease-in;
  }
  90% {
    -webkit-transform: translateY(0);
            transform: translateY(0);
    -webkit-animation-timing-function: ease-out;
            animation-timing-function: ease-out;
  }
  95% {
    -webkit-transform: translateY(-8px);
            transform: translateY(-8px);
    -webkit-animation-timing-function: ease-in;
            animation-timing-function: ease-in;
  }
  100% {
    -webkit-transform: translateY(0);
            transform: translateY(0);
    -webkit-animation-timing-function: ease-out;
            animation-timing-function: ease-out;
  }
}


@keyframes bounce-in-top {
  0% {
    -webkit-transform: translateY(-500px);
            transform: translateY(-500px);
    -webkit-animation-timing-function: ease-in;
            animation-timing-function: ease-in;
    opacity: 0;
  }
  38% {
    -webkit-transform: translateY(0);
            transform: translateY(0);
    -webkit-animation-timing-function: ease-out;
            animation-timing-function: ease-out;
    opacity: 1;
  }
  55% {
    -webkit-transform: translateY(-65px);
            transform: translateY(-65px);
    -webkit-animation-timing-function: ease-in;
            animation-timing-function: ease-in;
  }
  72% {
    -webkit-transform: translateY(0);
            transform: translateY(0);
    -webkit-animation-timing-function: ease-out;
            animation-timing-function: ease-out;
  }
  81% {
    -webkit-transform: translateY(-28px);
            transform: translateY(-28px);
    -webkit-animation-timing-function: ease-in;
            animation-timing-function: ease-in;
  }
  90% {
    -webkit-transform: translateY(0);
            transform: translateY(0);
    -webkit-animation-timing-function: ease-out;
            animation-timing-function: ease-out;
  }
  95% {
    -webkit-transform: translateY(-8px);
            transform: translateY(-8px);
    -webkit-animation-timing-function: ease-in;
            animation-timing-function: ease-in;
  }
  100% {
    -webkit-transform: translateY(0);
            transform: translateY(0);
    -webkit-animation-timing-function: ease-out;
            animation-timing-function: ease-out;
  }
}

`

export default function ConnectionToAWSLoader() {
    const isAWSConnected = useSelector(state => state.isAWSConnected);
    const isAWSLoading = useSelector(state => state.isAWSLoading);
    const isAWSErr = useSelector(state => state.isAWSErr);

    const [ isAWSConnected_S, setIsAWSConnected_S ] = useState(isAWSConnected)
    const [ isAWSLoading_S, setIsAWSLoading_S ] = useState(isAWSLoading)
    const [ isAWSErr_S, setIsAWSErr_S ] = useState(isAWSErr)

    // sets to use always use props
    useEffect(() => {
        if (isAWSConnected_S !== isAWSConnected) setIsAWSConnected_S(isAWSConnected)
        if (isAWSLoading_S !== isAWSLoading) setIsAWSLoading_S(isAWSLoading)
        if (isAWSErr_S !== isAWSErr) setIsAWSErr_S(isAWSErr)
    }, [ isAWSConnected, isAWSLoading, isAWSErr, isAWSLoading_S, isAWSConnected_S, isAWSErr_S ])

    // useEffect(() => {

    //     if (isAWSConnected_S !== isAWSConnected){
            
    //     }

    // }, [ isAWSLoading_S, isAWSConnected_S, isAWSErr_S ])

    return (
        <ConnectionToAWSLoaderStyled>
            
        </ConnectionToAWSLoaderStyled>
    )
}
